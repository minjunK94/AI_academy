-- [7] DDL, DCL, DML
-- SQL = DDL(DATE DEFINITION LANGUAGE) 테이블 생성, 테이블 삭제, 테이블 구조 변경, 테이블 모든 데이터 제거)
-- DML ( DATE MANIPULATION LANGUAGE) 데이터 검색, 데이터 수정 / SELECT, INSERT, UPDATE, DELETE
-- DCL ( DATE CONTROL LANGUAGE) 사용자 계정 생성, 사용자에게 권한부여, 권한박탈, 사용자 계정 삭제 트랜잭션 명령어
--★ ★ ★ DDL ★ ★ ★
-- 1. 테이블 생성( 문법 : CREATE TABLE "테이블 이름" ) : 테이블 구조를 정의
DROP TABLE BOOK;
CREATE TABLE BOOK (
    BOOKID NUMBER(4), -- BOOKID 필드의 타입은 숫자 4자리
    BOOKNAME VARCHAR2(20), -- BOOKNAME 필드의 타입의 문자 20Byte
    PUBLISHER VARCHAR2(30), -- PUBLISHER필드의 타입은 무자 30Byte
    RDATE DATE, --RDATE 필드의 타입은 DATE
    PRICE NUMBER(8, 2), -- PRICE필드의 타입은 숫자 전체 8자리 중 소수점 2자리 저장할수있음
    PRIMARY KEY(BOOKID) -- 제약 조건 : BOOKID 필드가 주키(PRIMARY KEY: NOT NULL, UNIQUE)
);

SELECT * FROM BOOK;
DESC BOOK;

DROP TABLE BOOK; -- 테이블 삭제
CREATE TABLE BOOK (
    BOOKID NUMBER(4) PRIMARY KEY, 
    BOOKNAME VARCHAR2(20),
    PUBLISHER VARCHAR2(30),
    RDATE DATE,
    PRICE NUMBER(8, 2)
);
SELECT * FROM BOOK;


    --DEPT01 테이블 : DEPTNO(숫자 2자리:PK), DNAME(문자 14자리), LOC(문자 13자리)
    DESC DEPT;
CREATE TABLE DEPT01 (
    DEPTNO NUMBER(2),
    DNAME VARCHAR2(14),
    LOC VARCHAR2(13),
    PRIMARY KEY(DEPTNO)
);


    --EX. EMP와 유사한 EMP01테이블 : EMPNO(숫자 4자리 :PK), ENAME(문자 10자리), SAL(숫자7,2)
                                --DEPTNO(숫자 2, DEPT01테이블의 DEPTNO와 연동: 외래키 FK)

CREATE TABLE EMP01(
    EMPNO NUMBER(4) PRIMARY KEY,
    ENAME VARCHAR2(10),
    SAL NUMBER(7,2),
    DEPTNO NUMBER(2) REFERENCES DEPT01(DEPTNO) --FK
);

SELECT * FROM EMP01;
-- 외래키로 연결할 경우 : 참조 테이블에 데이터를 먼저 INSERT 해야함
INSERT INTO DEPT01 VALUES (10, '신림', 'IT');
INSERT INTO EMP01 VALUES ( 1000, '홍', 9000, 10);
COMMIT; -- DML 명령어들을 데이터베이스에 적용 시킨다아아아아아아아아아아아아아아아아아아아아아아아

ROLLBACK;

--SUB QUERY 를 사용하여 테이블 생성

CREATE TABLE EMP02
    AS
    SELECT * FROM EMP; -- SUB QUERY 결과로 EMP02테이블 생성 후 데이터 가 들어감




CREATE TABLE EMP03
    AS
    SELECT EMPNO, ENAME, DEPTNO 
    FROM EMP;
    
SELECT * FROM EMP03;

-- BOOK 연습 문제

DROP TABLE BOOK;
DROP TABLE BOOKCATEGORY;

CREATE TABLE BOOKCATEGORY(
    cCODE NUMBER(3) PRIMARY KEY,
    cNAME VARCHAR2(100) NOT NULL UNIQUE,
    OFFICE_LOC VARCHAR2(100)
);

SELECT * FROM BOOKCATEGORY;

CREATE TABLE BOOK (
    cCODE NUMBER(3),
    bNO VARCHAR2(20),
    bNAME VARCHAR2(60) NOT NULL,
    PUBLISHER VARCHAR2(50),
    PUBYEAR NUMBER(4) DEFAULT EXTRACT(YEAR FROM SYSDATE), -- TO_CHAR(SYSDATE, 'YYYY') 으로 사용가능
    FOREIGN KEY(cCODE) REFERENCES BOOKCATEGORY(cCODE),
    PRIMARY KEY(bNO)
);

SELECT * FROM USER_TABLES;

-- 데이터 INSERT
INSERT INTO BOOKCATEGORY
    VALUES (100, '철학', '3층 인문실');
INSERT INTO BOOKCATEGORY
    VALUES (200, '인문', '3층 인문실');
INSERT INTO BOOKCATEGORY
    VALUES (300, '자연과학', '4층 과학실');
INSERT INTO BOOKCATEGORY
    VALUES (400, 'IT', '4층 과학실');
    
COMMIT;

SELECT * FROM BOOKCATEGORY;

INSERT INTO BOOK ( cCODE, bNO, bNAME, PUBLISHER)
    VALUES (100, '100A01', '철학자의 삶', 'MBC출판');
INSERT INTO BOOK
    VALUES (400, '400A01', '이것이DB다', '다음출판', 2022);
-- 데이터 출력
SELECT BNO, bNAME, PUBLISHER, PUBYEAR, cNAME, OFFICE_LOC
    FROM BOOKCATEGORY C, BOOK B
    WHERE C.cCODE = B.cCODE;

-- 예제
DROP TABLE MAJOB;
DROP TABLE STUDENT;

CREATE TABLE MAJOR(
    mCODE NUMBER(2) PRIMARY KEY,
    mNAME VARCHAR2(30) UNIQUE,
    mOFFICE VARCHAR2(40)
);

CREATE TABLE STUDENT(
    sNO NUMBER(5),
    sNAME VARCHAR2(20),
    sSCORE NUMBER(3) CHECK(1<=100),
    mCODE NUMBER(2),
    FOREIGN KEY (mCODE) REFERENCES MAJOR(mCODE),
    PRIMARY KEY(sNO)
);

SELECT * FROM STUDENT;

INSERT INTO MAJOR
    VALUES (1, '컴퓨터공학', 'A101호');
INSERT INTO MAJOR
    VALUES (2, '빅데이터', 'A102호');
    
SELECT * FROM MAJOR;

INSERT INTO STUDENT (sNO, sNAME, sSCORE, mCODE)
    VALUES (101, '홍길동', 99, 1);
INSERT INTO STUDENT
    VALUES (102, '신길동', 100, 2);
    
SELECT * FROM STUDENT;

SELECT sNO, sNAME, sSCORE, M.mCODE, mNAME, mOFFICE
    FROM STUDENT S, MAJOR M
    WHERE S.mCODE = M.mCODE;

UPDATE STUDENT
    SET sSCORE = 100, mCODE =2
    WHERE sCODE = 101;

DELETE FROM STUDENT
    WHERE sCODE = 101;












                                